var N = null;var searchIndex = {};
searchIndex["tower"]={"doc":"Various utility types and functions that are generally…","items":[[8,"Service","tower","An asynchronous function from `Request` to a `Response`.",N,N],[16,"Response","","Responses given by the service.",0,N],[16,"Error","","Errors produced by the service.",0,N],[16,"Future","","The future response value.",0,N],[10,"poll_ready","","Returns `Ready` when the service is able to process…",0,[[["self"]],["result",["async"]]]],[10,"call","","Process the request and return the response asynchronously.",0,N],[5,"service_fn","","Returns a new `ServiceFn` with the given closure.",N,[[["t"]],["servicefn"]]],[8,"MakeConnection","","The MakeConnection trait is used to create transports",N,N],[16,"Connection","","The transport provided by this service",1,N],[16,"Error","","Errors produced by the connecting service",1,N],[16,"Future","","The future that eventually produces the transport",1,N],[10,"poll_ready","","Returns `Ready` when it is able to make more connections.",1,[[["self"]],["result",["async"]]]],[10,"make_connection","","Connect and return a transport asynchronously",1,N],[8,"MakeService","","Creates new `Service` values.",N,N],[16,"Response","","Responses given by the service",2,N],[16,"Error","","Errors produced by the service",2,N],[16,"Service","","The `Service` value created by this factory",2,N],[16,"MakeError","","Errors produced while building a service.",2,N],[16,"Future","","The future of the `Service` instance.",2,N],[10,"poll_ready","","Returns `Ready` when the factory is able to process create…",2,[[["self"]],["result",["async"]]]],[10,"make_service","","Create and return a new service value asynchronously.",2,N],[0,"builder","","Builder types to compose layers and services",N,N],[3,"LayeredMakeService","tower::builder","Composed `MakeService` produced from `ServiceBuilder`",N,N],[3,"ServiceFuture","","Async resolve the MakeService and wrap it with the layers",N,N],[3,"ServiceBuilder","","Declaratively construct Service values.",N,N],[11,"new","","Create a new `ServiceBuilder` from a `MakeService`.",3,[[],["self"]]],[11,"layer","","Layer a new layer `T` onto the `ServiceBuilder`.",3,[[["self"],["t"]],["servicebuilder",["stack"]]]],[11,"buffer","","Buffer requests when when the next layer is out of capacity.",3,[[["self"],["usize"]],["servicebuilder",["stack"]]]],[11,"concurrency_limit","","Limit the max number of in-flight requests.",3,[[["self"],["usize"]],["servicebuilder",["stack"]]]],[11,"load_shed","","Drop requests when the next layer is unable to respond to…",3,[[["self"]],["servicebuilder",["stack"]]]],[11,"rate_limit","","Limit requests to at most `num` per the given duration",3,[[["self"],["u64"],["duration"]],["servicebuilder",["stack"]]]],[11,"retry","","Retry failed requests.",3,[[["self"],["p"]],["servicebuilder",["stack"]]]],[11,"timeout","","Fail requests that take longer than `timeout`.",3,[[["self"],["duration"]],["servicebuilder",["stack"]]]],[11,"make_service","","Create a `LayeredMakeService` from the composed layers and…",3,[[["self"],["m"]],["layeredmakeservice"]]],[11,"service","","Wrap the service `S` with the layers.",3,[[["self"],["s"]],["result"]]],[0,"layer","tower","A collection of `Layer` based tower services",N,N],[8,"Layer","tower::layer","Decorates a `Service`, transforming either the request or…",N,N],[16,"Response","","The wrapped service response type",4,N],[16,"Error","","The wrapped service's error type",4,N],[16,"LayerError","","The error produced when calling `layer`",4,N],[16,"Service","","The wrapped service",4,N],[10,"layer","","Wrap the given service with the middleware, returning a…",4,[[["self"],["s"]],["result"]]],[0,"util","","`util` exports an Identity Layer and Chain, a mechanism…",N,N],[3,"Identity","tower::layer::util","A no-op middleware.",N,N],[3,"Stack","","Two middlewares chained together.",N,N],[0,"util","tower","Combinators for working with `Service`s",N,N],[3,"BoxService","tower::util","A boxed `Service + Send` trait object.",N,N],[3,"CallAll","","This is a `futures::Stream` of responses resulting from…",N,N],[3,"CallAllUnordered","","A stream of responses received from the inner service in…",N,N],[4,"Either","","Combine two different service types into a single type.",N,N],[13,"A","","",5,N],[13,"B","","",5,N],[3,"Oneshot","","A `Future` consuming a `Service` and request, waiting…",N,N],[3,"Optional","","Optionally forwards requests to an inner service.",N,N],[3,"Ready","","Future yielding a `Service` once the service is ready to…",N,N],[3,"UnsyncBoxService","","A boxed `Service` trait object.",N,N],[8,"ServiceExt","","An extension trait for `Service`s that provides a variety…",N,N],[11,"ready","","A future yielding the service when it is ready to accept a…",6,[[["self"]],["ready"]]],[11,"oneshot","","Consume this `Service`, calling with the providing request…",6,[[["self"],["request"]],["oneshot"]]],[11,"call_all","","Process all requests from the given `Stream`, and produce…",6,[[["self"],["s"]],["callall"]]],[11,"from","tower::builder","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"poll_ready","","",7,[[["self"]],["result",["async"]]]],[11,"make_service","","",7,N],[11,"poll_ready","","",7,[[["self"]],["result",["async"]]]],[11,"make_connection","","",7,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"into_future","","",8,[[["self"]],["f"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","tower::layer::util","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","tower::util","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"poll_ready","","",11,[[["self"]],["result",["async"]]]],[11,"make_service","","",11,N],[11,"poll_ready","","",11,[[["self"]],["result",["async"]]]],[11,"make_connection","","",11,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"into_future","","",5,[[["self"]],["f"]]],[11,"poll_ready","","",5,[[["self"]],["result",["async"]]]],[11,"make_service","","",5,N],[11,"poll_ready","","",5,[[["self"]],["result",["async"]]]],[11,"make_connection","","",5,N],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"into_future","","",14,[[["self"]],["f"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"poll_ready","","",15,[[["self"]],["result",["async"]]]],[11,"make_service","","",15,N],[11,"poll_ready","","",15,[[["self"]],["result",["async"]]]],[11,"make_connection","","",15,N],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"into_future","","",16,[[["self"]],["f"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"poll_ready","","",17,[[["self"]],["result",["async"]]]],[11,"make_service","","",17,N],[11,"poll_ready","","",17,[[["self"]],["result",["async"]]]],[11,"make_connection","","",17,N],[11,"poll_ready","","",5,[[["self"]],["result",["async"]]]],[11,"call","","",5,N],[11,"poll_ready","","",11,[[["self"]],["result",["async"]]]],[11,"call","","",11,[[["self"],["t"]],["box",["future"]]]],[11,"poll_ready","","",17,[[["self"]],["result",["async"]]]],[11,"call","","",17,[[["self"],["t"]],["box",["future"]]]],[11,"poll_ready","","",15,[[["self"]],["result",["async"]]]],[11,"call","","",15,N],[11,"default","tower::layer::util","",9,[[],["identity"]]],[11,"poll","tower::util","",13,[[["self"]],["result",["async"]]]],[11,"poll","","",12,[[["self"]],["result",["async"]]]],[11,"clone","tower::layer::util","",9,[[["self"]],["identity"]]],[11,"poll","tower::util","",14,[[["self"]],["result",["async"]]]],[11,"poll","","",5,[[["self"]],["result",["async"]]]],[11,"poll","","",16,[[["self"]],["result",["async"]]]],[11,"layer","tower::layer::util","",10,[[["self"],["s"]],["result"]]],[11,"layer","","",9,[[["self"],["s"]],["result"]]],[11,"fmt","tower::util","",16,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tower::layer::util","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tower::util","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tower::builder","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"poll","","",8,[[["self"]],["poll"]]],[11,"poll_ready","","",7,[[["self"]],["poll"]]],[11,"call","","",7,N],[11,"new","tower::layer::util","Create a new `Identity` value",9,[[],["identity"]]],[11,"new","","Create a new `Stack`.",10,[[["inner"],["outer"]],["stack"]]],[11,"new","tower::util","",11,[[["s"]],["boxservice"]]],[11,"new","","Create new `CallAll` combinator.",12,[[["svc"],["s"]],["callall"]]],[11,"into_inner","","Extract the wrapped `Service`.",12,[[["self"]],["svc"]]],[11,"unordered","","Return responses as they are ready, regardless of the…",12,[[["self"]],["callallunordered"]]],[11,"new","","Create new `CallAllUnordered` combinator.",13,[[["svc"],["s"]],["callallunordered"]]],[11,"into_inner","","Extract the wrapped `Service`.",13,[[["self"]],["svc"]]],[11,"new","","",14,[[["s"],["req"]],["oneshot"]]],[11,"new","","Create a new `OptionService`",15,[[["option"]],["optional"]]],[11,"new","","",16,[[["t"]],["ready"]]],[11,"new","","",17,[[["s"]],["unsyncboxservice"]]]],"paths":[[8,"Service"],[8,"MakeConnection"],[8,"MakeService"],[3,"ServiceBuilder"],[8,"Layer"],[4,"Either"],[8,"ServiceExt"],[3,"LayeredMakeService"],[3,"ServiceFuture"],[3,"Identity"],[3,"Stack"],[3,"BoxService"],[3,"CallAll"],[3,"CallAllUnordered"],[3,"Oneshot"],[3,"Optional"],[3,"Ready"],[3,"UnsyncBoxService"]]};
searchIndex["tower_balance"]={"doc":"","items":[[3,"Weight","tower_balance","A weight on [0.0, ∞].",N,N],[3,"Weighted","","A Service, that implements Load, that",N,N],[3,"WithWeighted","","",N,N],[3,"Balance","","Balances requests across a set of inner services.",N,N],[0,"choose","","",N,N],[3,"PowerOfTwoChoices","tower_balance::choose","Chooses nodes using the [Power of Two Choices][p2c].",N,N],[3,"RoundRobin","","Chooses nodes sequentially.",N,N],[3,"TooFew","","Indicates that there were not at least two services.",N,N],[3,"Replicas","","Holds two or more services.",N,N],[11,"new","","",0,[[["smallrng"]],["self"]]],[8,"Choose","","A strategy for choosing nodes.",N,N],[10,"choose","","Returns the index of a replica to be used next.",1,[[["self"],["replicas"]],["usize"]]],[11,"len","","",2,[[["self"]],["usize"]]],[0,"error","tower_balance","",N,N],[3,"Balance","tower_balance::error","",N,N],[0,"future","tower_balance","",N,N],[3,"ResponseFuture","tower_balance::future","",N,N],[0,"load","tower_balance","",N,N],[3,"Constant","tower_balance::load","Wraps a type so that `Load::load` returns a constant value.",N,N],[3,"InstrumentFuture","","Attaches a `I`-typed instruments to the result of an…",N,N],[3,"NoInstrument","","A `Instrument` implementation that drops each instrument…",N,N],[11,"new","","",3,[[["t"],["m"]],["self"]]],[11,"new","","",4,[[["i"],["h"],["f"]],["self"]]],[0,"peak_ewma","","",N,N],[3,"PeakEwma","tower_balance::load::peak_ewma","Wraps an `S`-typed Service with Peak-EWMA load measurement.",N,N],[3,"WithPeakEwma","","Wraps a `D`-typed stream of discovery updates with…",N,N],[3,"Cost","","Represents the relative cost of communicating with a…",N,N],[3,"Handle","","Updates `RttEstimate` when dropped.",N,N],[11,"new","","Wraps a `D`-typed `Discover` so that services have a…",5,[[["d"],["duration"],["duration"],["i"]],["self"]]],[0,"pending_requests","tower_balance::load","",N,N],[3,"PendingRequests","tower_balance::load::pending_requests","Expresses load based on the number of currently-pending…",N,N],[3,"WithPendingRequests","","Wraps `inner`'s services with `PendingRequests`.",N,N],[3,"Count","","Represents the number of currently-pending requests to a…",N,N],[3,"Handle","","",N,N],[11,"new","","",6,[[["d"],["i"]],["self"]]],[11,"new","tower_balance","",7,[[["t"],["w"]],["self"]]],[11,"into_parts","","",7,N],[18,"MIN","","",8,N],[18,"DEFAULT","","",8,N],[8,"Instrument","tower_balance::load","Attaches `I`-typed instruments to `V` typed values.",N,N],[16,"Output","","",9,N],[10,"instrument","","Attaches an `H`-typed handle to a `V`-typed value.",9,N],[8,"Load","","Exposes a load metric.",N,N],[16,"Metric","","",10,N],[10,"load","","",10,N],[0,"pool","tower_balance","This module defines a load-balanced pool of services that…",N,N],[3,"PoolDiscoverer","tower_balance::pool","A wrapper around `MakeService` that discovers a new…",N,N],[3,"Builder","","A [builder] that lets you configure how a [`Pool`]…",N,N],[3,"Pool","","A dynamically sized, load-balanced pool of `Service`…",N,N],[11,"new","","Create a new builder with default values for all load…",11,[[],["self"]]],[11,"underutilized_below","","When the estimated load (see the module-level docs) drops…",11,[[["self"],["f64"]],["self"]]],[11,"loaded_above","","When the estimated load (see the module-level docs)…",11,[[["self"],["f64"]],["self"]]],[11,"initial","","The initial estimated load average.",11,[[["self"],["f64"]],["self"]]],[11,"urgency","","How aggressively the estimated load average is updated.",11,[[["self"],["f64"]],["self"]]],[11,"build","","See [`Pool::new`].",11,[[["self"],["ms"],["target"],["c"]],["pool"]]],[11,"new","","Construct a new dynamically sized `Pool`.",12,[[["ms"],["target"],["c"]],["self"]]],[8,"HasWeight","tower_balance","",N,N],[10,"weight","","",13,[[["self"]],["weight"]]],[11,"p2c","","Chooses services using the [Power of Two Choices][p2c].",14,[[["d"]],["self"]]],[11,"p2c_with_rng","","Initializes a P2C load balancer from the provided…",14,[[["d"],["r"]],["result",["error"]]]],[11,"round_robin","","Attempts to choose services sequentially.",14,[[["d"]],["self"]]],[11,"new","","Creates a new balancer.",14,[[["d"],["c"]],["self"]]],[11,"is_ready","","Returns true iff there are ready services.",14,[[["self"]],["bool"]]],[11,"is_not_ready","","Returns true iff there are no ready services.",14,[[["self"]],["bool"]]],[11,"num_ready","","Counts the number of services considered to be ready.",14,[[["self"]],["usize"]]],[11,"num_not_ready","","Counts the number of services not considered to be ready.",14,[[["self"]],["usize"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"poll_ready","","",7,[[["self"]],["result",["async"]]]],[11,"make_connection","","",7,N],[11,"poll_ready","","",7,[[["self"]],["result",["async"]]]],[11,"make_service","","",7,N],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"poll_ready","","",14,[[["self"]],["result",["async"]]]],[11,"make_connection","","",14,N],[11,"poll_ready","","",14,[[["self"]],["result",["async"]]]],[11,"make_service","","",14,N],[11,"from","tower_balance::choose","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"to_string","tower_balance::error","",18,[[["self"]],["string"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"from","tower_balance::future","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"into_future","","",19,[[["self"]],["f"]]],[11,"from","tower_balance::load","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"poll_ready","","",3,[[["self"]],["result",["async"]]]],[11,"make_connection","","",3,N],[11,"poll_ready","","",3,[[["self"]],["result",["async"]]]],[11,"make_service","","",3,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"into_future","","",4,[[["self"]],["f"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"from","tower_balance::load::peak_ewma","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"poll_ready","","",21,[[["self"]],["result",["async"]]]],[11,"make_connection","","",21,N],[11,"poll_ready","","",21,[[["self"]],["result",["async"]]]],[11,"make_service","","",21,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"from","tower_balance::load::pending_requests","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"poll_ready","","",24,[[["self"]],["result",["async"]]]],[11,"make_connection","","",24,N],[11,"poll_ready","","",24,[[["self"]],["result",["async"]]]],[11,"make_service","","",24,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"equivalent","","",25,[[["self"],["k"]],["bool"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"from","tower_balance::pool","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"poll_ready","","",12,[[["self"]],["result",["async"]]]],[11,"make_connection","","",12,N],[11,"poll_ready","","",12,[[["self"]],["result",["async"]]]],[11,"make_service","","",12,N],[11,"choose","tower_balance::choose","Chooses two distinct nodes at random and compares their…",0,[[["self"],["replicas"]],["usize"]]],[11,"choose","","",16,[[["self"],["replicas"]],["usize"]]],[11,"instrument","tower_balance::load","",20,[[["self"],["h"],["v"]],["v"]]],[11,"weight","tower_balance::load::peak_ewma","",21,[[["self"]],["weight"]]],[11,"weight","tower_balance::load::pending_requests","",24,[[["self"]],["weight"]]],[11,"weight","tower_balance","",7,[[["self"]],["weight"]]],[11,"load","tower_balance::load","",3,[[["self"]],["m"]]],[11,"load","tower_balance::load::peak_ewma","",21,N],[11,"load","tower_balance::load::pending_requests","",24,[[["self"]],["count"]]],[11,"load","tower_balance","",7,N],[11,"eq","tower_balance::load::peak_ewma","",22,[[["self"],["cost"]],["bool"]]],[11,"ne","","",22,[[["self"],["cost"]],["bool"]]],[11,"eq","tower_balance::load::pending_requests","",25,[[["self"],["count"]],["bool"]]],[11,"ne","","",25,[[["self"],["count"]],["bool"]]],[11,"eq","tower_balance","",8,[[["self"],["weight"]],["bool"]]],[11,"ne","","",8,[[["self"],["weight"]],["bool"]]],[11,"eq","","",7,[[["self"],["weighted"]],["bool"]]],[11,"ne","","",7,[[["self"],["weighted"]],["bool"]]],[11,"default","tower_balance::choose","",0,[[],["self"]]],[11,"default","","",16,[[],["roundrobin"]]],[11,"default","tower_balance::load::pending_requests","",25,[[],["count"]]],[11,"default","tower_balance","",8,[[],["self"]]],[11,"default","tower_balance::pool","",11,[[],["self"]]],[11,"cmp","tower_balance::load::pending_requests","",25,[[["self"],["count"]],["ordering"]]],[11,"clone","tower_balance::choose","",17,[[["self"]],["toofew"]]],[11,"clone","tower_balance::load","",20,[[["self"]],["noinstrument"]]],[11,"clone","tower_balance::load::peak_ewma","",22,[[["self"]],["cost"]]],[11,"clone","tower_balance::load::pending_requests","",25,[[["self"]],["count"]]],[11,"clone","tower_balance","",8,[[["self"]],["weight"]]],[11,"clone","","",7,[[["self"]],["weighted"]]],[11,"clone","tower_balance::pool","",11,[[["self"]],["builder"]]],[11,"from","tower_balance","",7,[[["t"]],["self"]]],[11,"from","","",15,[[["d"]],["self"]]],[11,"from","","",8,[[["f64"]],["self"]]],[11,"drop","tower_balance::load::peak_ewma","",23,[[["self"]]]],[11,"into","tower_balance","",8,[[["self"]],["f64"]]],[11,"partial_cmp","tower_balance::load::peak_ewma","",22,[[["self"],["cost"]],["option",["ordering"]]]],[11,"lt","","",22,[[["self"],["cost"]],["bool"]]],[11,"le","","",22,[[["self"],["cost"]],["bool"]]],[11,"gt","","",22,[[["self"],["cost"]],["bool"]]],[11,"ge","","",22,[[["self"],["cost"]],["bool"]]],[11,"partial_cmp","tower_balance::load::pending_requests","",25,[[["self"],["count"]],["option",["ordering"]]]],[11,"lt","","",25,[[["self"],["count"]],["bool"]]],[11,"le","","",25,[[["self"],["count"]],["bool"]]],[11,"gt","","",25,[[["self"],["count"]],["bool"]]],[11,"ge","","",25,[[["self"],["count"]],["bool"]]],[11,"partial_cmp","tower_balance","",8,[[["self"],["weight"]],["option",["ordering"]]]],[11,"lt","","",8,[[["self"],["weight"]],["bool"]]],[11,"le","","",8,[[["self"],["weight"]],["bool"]]],[11,"gt","","",8,[[["self"],["weight"]],["bool"]]],[11,"ge","","",8,[[["self"],["weight"]],["bool"]]],[11,"partial_cmp","","",7,[[["self"],["weighted"]],["option",["ordering"]]]],[11,"lt","","",7,[[["self"],["weighted"]],["bool"]]],[11,"le","","",7,[[["self"],["weighted"]],["bool"]]],[11,"gt","","",7,[[["self"],["weighted"]],["bool"]]],[11,"ge","","",7,[[["self"],["weighted"]],["bool"]]],[11,"fmt","tower_balance::choose","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_balance::error","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_balance::load","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_balance::load::peak_ewma","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_balance::load::pending_requests","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_balance","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_balance::pool","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_balance","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_balance::error","",18,[[["self"],["formatter"]],["result"]]],[11,"div","tower_balance::load::peak_ewma","",22,[[["self"],["weight"]],["f64"]]],[11,"div","tower_balance::load::pending_requests","",25,[[["self"],["weight"]],["f64"]]],[11,"index","tower_balance::choose","",2,N],[11,"source","tower_balance::error","",18,[[["self"]],["option",["error"]]]],[11,"poll","tower_balance::future","",19,[[["self"]],["poll"]]],[11,"poll","tower_balance::load","",4,[[["self"]],["poll"]]],[11,"poll_ready","","",3,[[["self"]],["poll"]]],[11,"call","","",3,N],[11,"poll_ready","tower_balance::load::peak_ewma","",21,[[["self"]],["poll"]]],[11,"call","","",21,N],[11,"poll_ready","tower_balance::load::pending_requests","",24,[[["self"]],["poll"]]],[11,"call","","",24,N],[11,"poll_ready","tower_balance","",7,[[["self"]],["poll"]]],[11,"call","","",7,N],[11,"poll_ready","tower_balance::pool","",12,[[["self"]],["poll"]]],[11,"call","","",12,N],[11,"poll_ready","tower_balance","Prepares the balancer to process a request.",14,[[["self"]],["poll"]]],[11,"call","","",14,N],[11,"poll","tower_balance::load","Yields the next discovery change set.",3,[[["self"]],["poll",["change"]]]],[11,"poll","tower_balance::load::peak_ewma","",5,[[["self"]],["poll",["change"]]]],[11,"poll","tower_balance::load::pending_requests","Yields the next discovery change set.",6,[[["self"]],["poll",["change"]]]],[11,"poll","tower_balance","",15,[[["self"]],["poll",["change"]]]],[11,"poll","tower_balance::pool","",27,[[["self"]],["poll",["change"]]]]],"paths":[[3,"PowerOfTwoChoices"],[8,"Choose"],[3,"Replicas"],[3,"Constant"],[3,"InstrumentFuture"],[3,"WithPeakEwma"],[3,"WithPendingRequests"],[3,"Weighted"],[3,"Weight"],[8,"Instrument"],[8,"Load"],[3,"Builder"],[3,"Pool"],[8,"HasWeight"],[3,"Balance"],[3,"WithWeighted"],[3,"RoundRobin"],[3,"TooFew"],[3,"Balance"],[3,"ResponseFuture"],[3,"NoInstrument"],[3,"PeakEwma"],[3,"Cost"],[3,"Handle"],[3,"PendingRequests"],[3,"Count"],[3,"Handle"],[3,"PoolDiscoverer"]]};
searchIndex["tower_buffer"]={"doc":"Buffer requests when the inner service is out of capacity.","items":[[3,"BufferLayer","tower_buffer","Buffer requests with a bounded buffer",N,N],[3,"Buffer","","Adds a buffer in front of an inner service.",N,N],[0,"error","","Error types",N,N],[3,"ServiceError","tower_buffer::error","An error produced by a `Service` wrapped by a `Buffer`",N,N],[3,"Closed","","An error when the buffer's worker closes unexpectedly.",N,N],[3,"SpawnError","","Error produced when spawning the worker fails",N,N],[0,"future","tower_buffer","Future types",N,N],[3,"ResponseFuture","tower_buffer::future","Future eventually completed with the response to the…",N,N],[11,"new","tower_buffer","",0,[[["usize"]],["self"]]],[11,"with_executor","","",0,[[["usize"],["e"]],["self"]]],[11,"new","","Creates a new `Buffer` wrapping `service`.",1,[[["t"],["usize"]],["result",["box"]]]],[11,"with_executor","","Creates a new `Buffer` wrapping `service`.",1,[[["t"],["usize"],["e"]],["result",["box"]]]],[8,"WorkerExecutor","","This trait allows you to use either Tokio's threaded…",N,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"to_string","tower_buffer::error","",2,[[["self"]],["string"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","tower_buffer::future","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"into_future","","",5,[[["self"]],["f"]]],[11,"clone","tower_buffer","",1,[[["self"]],["self"]]],[11,"fmt","tower_buffer::error","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"source","","",2,[[["self"]],["option",["error"]]]],[11,"poll","tower_buffer::future","",5,[[["self"]],["poll"]]],[11,"layer","tower_buffer","",0,[[["self"],["s"]],["result"]]],[11,"poll_ready","","",1,[[["self"]],["poll"]]],[11,"call","","",1,N]],"paths":[[3,"BufferLayer"],[3,"Buffer"],[3,"ServiceError"],[3,"Closed"],[3,"SpawnError"],[3,"ResponseFuture"]]};
searchIndex["tower_discover"]={"doc":"Tower service discovery","items":[[3,"ServiceList","tower_discover","Static service discovery based on a predetermined list of…",N,N],[3,"ServiceStream","","Dynamic service discovery based on a stream of service…",N,N],[4,"Change","","A change in the service set",N,N],[13,"Insert","","",0,N],[13,"Remove","","",0,N],[11,"new","","",1,[[["t"]],["servicelist"]]],[11,"new","","",2,[[["s"]],["self"]]],[8,"Discover","","Provide a uniform set of services able to satisfy a request.",N,N],[16,"Key","","NewService key",3,N],[16,"Service","","",3,N],[16,"Error","","Error produced during discovery",3,N],[10,"poll","","Yields the next discovery change set.",3,[[["self"]],["poll",["change"]]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"poll","","",1,[[["self"]],["poll",["change"]]]],[11,"poll","","",2,[[["self"]],["poll",["change"]]]]],"paths":[[4,"Change"],[3,"ServiceList"],[3,"ServiceStream"],[8,"Discover"]]};
searchIndex["tower_filter"]={"doc":"Conditionally dispatch requests to the inner service based…","items":[[3,"FilterLayer","tower_filter","",N,N],[3,"Filter","","",N,N],[0,"error","","Error types",N,N],[3,"Error","tower_filter::error","Error produced by `Filter`",N,N],[11,"rejected","","Create a new `Error` representing a rejected request.",0,[[],["error"]]],[11,"inner","","Create a new `Error` representing an inner service error.",0,[[["e"]],["error"]]],[0,"future","tower_filter","Future types",N,N],[3,"ResponseFuture","tower_filter::future","Filtered response future",N,N],[11,"new","tower_filter","",1,[[["u"]],["self"]]],[8,"Predicate","","Checks a request",N,N],[16,"Future","","",2,N],[10,"check","","",2,N],[11,"new","","",3,[[["t"],["u"]],["self"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"to_string","tower_filter::error","",0,[[["self"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","tower_filter::future","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"into_future","","",4,[[["self"]],["f"]]],[11,"fmt","tower_filter::error","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_filter::future","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_filter","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_filter::error","",0,[[["self"],["formatter"]],["result"]]],[11,"source","","",0,[[["self"]],["option",["error"]]]],[11,"poll","tower_filter::future","",4,[[["self"]],["poll"]]],[11,"poll_ready","tower_filter","",3,[[["self"]],["poll"]]],[11,"call","","",3,N],[11,"layer","","",1,[[["self"],["s"]],["result"]]]],"paths":[[3,"Error"],[3,"FilterLayer"],[8,"Predicate"],[3,"Filter"],[3,"ResponseFuture"]]};
searchIndex["tower_layer"]={"doc":"Layer traits and extensions.","items":[[8,"Layer","tower_layer","Decorates a `Service`, transforming either the request or…",N,N],[16,"Response","","The wrapped service response type",0,N],[16,"Error","","The wrapped service's error type",0,N],[16,"LayerError","","The error produced when calling `layer`",0,N],[16,"Service","","The wrapped service",0,N],[10,"layer","","Wrap the given service with the middleware, returning a…",0,[[["self"],["s"]],["result"]]]],"paths":[[8,"Layer"]]};
searchIndex["tower_limit"]={"doc":"Limit inbound requests.","items":[[3,"ConcurrencyLimit","tower_limit","",N,N],[3,"ConcurrencyLimitLayer","","",N,N],[3,"RateLimit","","",N,N],[3,"RateLimitLayer","","",N,N],[0,"concurrency","","Limit the max number of requests being concurrently…",N,N],[3,"ConcurrencyLimitLayer","tower_limit::concurrency","",N,N],[3,"ConcurrencyLimit","","",N,N],[0,"future","","",N,N],[3,"ResponseFuture","tower_limit::concurrency::future","",N,N],[11,"new","tower_limit","",0,[[["usize"]],["self"]]],[11,"new","","Create a new rate limiter",1,[[["t"],["usize"]],["self"]]],[11,"get_ref","","Get a reference to the inner service",1,[[["self"]],["t"]]],[11,"get_mut","","Get a mutable reference to the inner service",1,[[["self"]],["t"]]],[11,"into_inner","","Consume `self`, returning the inner service",1,[[["self"]],["t"]]],[0,"rate","","Limit the rate at which requests are processed.",N,N],[3,"RateLimitLayer","tower_limit::rate","",N,N],[3,"Rate","","",N,N],[3,"RateLimit","","",N,N],[0,"error","","",N,N],[0,"future","","",N,N],[3,"ResponseFuture","tower_limit::rate::future","",N,N],[11,"new","tower_limit","",2,[[["u64"],["duration"]],["self"]]],[11,"new","tower_limit::rate","Create a new rate",3,[[["u64"],["duration"]],["self"]]],[11,"new","tower_limit","Create a new rate limiter",4,[[["t"],["rate"]],["self"]]],[11,"get_ref","","Get a reference to the inner service",4,[[["self"]],["t"]]],[11,"get_mut","","Get a mutable reference to the inner service",4,[[["self"]],["t"]]],[11,"into_inner","","Consume `self`, returning the inner service",4,[[["self"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","tower_limit::concurrency::future","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"into_future","","",5,[[["self"]],["f"]]],[11,"from","tower_limit::rate","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","tower_limit::rate::future","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"into_future","","",6,[[["self"]],["f"]]],[11,"clone","tower_limit","",0,[[["self"]],["concurrencylimitlayer"]]],[11,"clone","","",1,[[["self"]],["concurrencylimit"]]],[11,"clone","tower_limit::rate","",3,[[["self"]],["rate"]]],[11,"drop","tower_limit::concurrency::future","",5,[[["self"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_limit","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_limit::rate::future","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_limit","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_limit::rate","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_limit","",4,[[["self"],["formatter"]],["result"]]],[11,"poll","tower_limit::concurrency::future","",5,[[["self"]],["poll"]]],[11,"poll","tower_limit::rate::future","",6,[[["self"]],["poll"]]],[11,"layer","tower_limit","",0,[[["self"],["s"]],["result"]]],[11,"layer","","",2,[[["self"],["s"]],["result"]]],[11,"poll_ready","","",1,[[["self"]],["poll"]]],[11,"call","","",1,N],[11,"poll_ready","","",4,[[["self"]],["poll"]]],[11,"call","","",4,N]],"paths":[[3,"ConcurrencyLimitLayer"],[3,"ConcurrencyLimit"],[3,"RateLimitLayer"],[3,"Rate"],[3,"RateLimit"],[3,"ResponseFuture"],[3,"ResponseFuture"]]};
searchIndex["tower_load_shed"]={"doc":"tower-load-shed","items":[[3,"ResponseFuture","tower_load_shed","Future for the `LoadShed` service.",N,N],[3,"LoadShedLayer","","A `tower-layer` to wrap services in `LoadShed` middleware.",N,N],[3,"LoadShed","","A `Service` that sheds load when the inner service isn't…",N,N],[0,"error","","Error types",N,N],[3,"Overloaded","tower_load_shed::error","An error returned by `Overload` when the underlying…",N,N],[11,"new","tower_load_shed","Creates a new layer.",0,[[],["self"]]],[11,"new","","Wraps a service in `LoadShed` middleware.",1,[[["s"]],["self"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"into_future","","",2,[[["self"]],["f"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"to_string","tower_load_shed::error","",3,[[["self"]],["string"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"clone","tower_load_shed","",1,[[["self"]],["self"]]],[11,"fmt","tower_load_shed::error","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_load_shed","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_load_shed::error","",3,[[["self"],["formatter"]],["result"]]],[11,"poll","tower_load_shed","",2,[[["self"]],["poll"]]],[11,"poll_ready","","",1,[[["self"]],["poll"]]],[11,"call","","",1,N],[11,"layer","","",0,[[["self"],["s"]],["result"]]]],"paths":[[3,"LoadShedLayer"],[3,"LoadShed"],[3,"ResponseFuture"],[3,"Overloaded"]]};
searchIndex["tower_reconnect"]={"doc":"","items":[[3,"Reconnect","tower_reconnect","",N,N],[0,"future","","",N,N],[3,"ResponseFuture","tower_reconnect::future","",N,N],[11,"new","tower_reconnect","",0,[[["m"],["target"]],["self"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"poll_ready","","",0,[[["self"]],["result",["async"]]]],[11,"make_connection","","",0,N],[11,"poll_ready","","",0,[[["self"]],["result",["async"]]]],[11,"make_service","","",0,N],[11,"from","tower_reconnect::future","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"into_future","","",1,[[["self"]],["f"]]],[11,"fmt","tower_reconnect","",0,[[["self"],["formatter"]],["result"]]],[11,"poll","tower_reconnect::future","",1,[[["self"]],["poll"]]],[11,"poll_ready","tower_reconnect","",0,[[["self"]],["poll"]]],[11,"call","","",0,N]],"paths":[[3,"Reconnect"],[3,"ResponseFuture"]]};
searchIndex["tower_retry"]={"doc":"Tower middleware for retrying \"failed\" requests.","items":[[3,"Retry","tower_retry","Configure retrying requests of \"failed\" responses.",N,N],[3,"RetryLayer","","Retry requests based on a policy",N,N],[3,"ResponseFuture","","The `Future` returned by a `Retry` service.",N,N],[0,"budget","","A retry \"budget\" for allowing only a certain amount of…",N,N],[3,"Budget","tower_retry::budget","Represents a \"budget\" for retrying requests.",N,N],[3,"Overdrawn","","Indicates that it is not currently allowed to \"withdraw\"…",N,N],[11,"new","","Create a `Budget` that allows for a certain percent of the…",0,[[["duration"],["u32"],["f32"]],["self"]]],[11,"deposit","","Store a \"deposit\" in the budget, which will be used to…",0,[[["self"]]]],[11,"withdraw","","Check whether there is enough \"balance\" in the budget to…",0,[[["self"]],["result",["overdrawn"]]]],[8,"Policy","tower_retry","A \"retry policy\" to classify if a request should be retried.",N,N],[16,"Future","","The `Future` type returned by `Policy::retry()`.",1,N],[10,"retry","","Check the policy if a certain request should be retried.",1,[[["self"],["req"],["result"]],["option"]]],[10,"clone_request","","Tries to clone a request before being passed to the inner…",1,[[["self"],["req"]],["option"]]],[11,"new","","Create a new `RetryLayer` from a retry policy",2,[[["p"]],["self"]]],[11,"new","","Retry the inner service depending on this…",3,[[["p"],["s"]],["self"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"into_future","","",4,[[["self"]],["f"]]],[11,"from","tower_retry::budget","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"default","","",0,[[],["budget"]]],[11,"clone","tower_retry","",3,[[["self"]],["retry"]]],[11,"fmt","tower_retry::budget","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_retry","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"poll","","",4,[[["self"]],["poll"]]],[11,"layer","","",2,[[["self"],["s"]],["result"]]],[11,"poll_ready","","",3,[[["self"]],["poll"]]],[11,"call","","",3,N]],"paths":[[3,"Budget"],[8,"Policy"],[3,"RetryLayer"],[3,"Retry"],[3,"ResponseFuture"],[3,"Overdrawn"]]};
searchIndex["tower_service"]={"doc":"Definition of the core `Service` trait to Tower","items":[[8,"Service","tower_service","An asynchronous function from `Request` to a `Response`.",N,N],[16,"Response","","Responses given by the service.",0,N],[16,"Error","","Errors produced by the service.",0,N],[16,"Future","","The future response value.",0,N],[10,"poll_ready","","Returns `Ready` when the service is able to process…",0,[[["self"]],["poll"]]],[10,"call","","Process the request and return the response asynchronously.",0,N]],"paths":[[8,"Service"]]};
searchIndex["tower_test"]={"doc":"Mock `Service` that can be used in tests.","items":[[0,"mock","tower_test","Mock `Service` that can be used in tests.",N,N],[3,"Mock","tower_test::mock","A mock service",N,N],[3,"Handle","","Handle to the `Mock`.",N,N],[3,"SendResponse","","Send a response in reply to a received request.",N,N],[5,"pair","","Create a new `Mock` and `Handle` pair.",N,N],[0,"error","","Error types",N,N],[3,"Closed","tower_test::mock::error","",N,N],[0,"future","tower_test::mock","Future types",N,N],[3,"ResponseFuture","tower_test::mock::future","Future of the `Mock` response.",N,N],[11,"poll_request","tower_test::mock","Asynchronously gets the next request",0,[[["self"]],["poll",["option","box"]]]],[11,"next_request","","Synchronously gets the next request.",0,[[["self"]],["option"]]],[11,"allow","","Allow a certain number of requests",0,[[["self"],["u64"]]]],[11,"send_error","","Make the next poll_ method error with the given error.",0,[[["self"],["e"]]]],[11,"send_response","","",1,[[["self"],["t"]]]],[11,"send_error","","",1,[[["self"],["e"]]]],[14,"assert_request_eq","tower_test","Asserts that the mock handle receives a new request equal…",N,N],[11,"from","tower_test::mock","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"to_string","tower_test::mock::error","",3,[[["self"]],["string"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","tower_test::mock::future","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"into_future","","",4,[[["self"]],["f"]]],[11,"clone","tower_test::mock","",2,[[["self"]],["self"]]],[11,"drop","","",2,[[["self"]]]],[11,"drop","","",0,[[["self"]]]],[11,"fmt","tower_test::mock::error","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_test::mock::future","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_test::mock","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_test::mock::error","",3,[[["self"],["formatter"]],["result"]]],[11,"poll","tower_test::mock::future","",4,[[["self"]],["poll"]]],[11,"poll_ready","tower_test::mock","",2,[[["self"]],["poll"]]],[11,"call","","",2,N]],"paths":[[3,"Handle"],[3,"SendResponse"],[3,"Mock"],[3,"Closed"],[3,"ResponseFuture"]]};
searchIndex["tower_timeout"]={"doc":"Tower middleware that applies a timeout to requests.","items":[[3,"TimeoutLayer","tower_timeout","Applies a timeout to requests via the supplied inner…",N,N],[3,"Timeout","","Applies a timeout to requests.",N,N],[0,"error","","Error types",N,N],[3,"Elapsed","tower_timeout::error","The timeout elapsed.",N,N],[0,"future","tower_timeout","Future types",N,N],[3,"ResponseFuture","tower_timeout::future","`Timeout` response future",N,N],[11,"new","tower_timeout","Create a timeout from a duration",0,[[["duration"]],["self"]]],[11,"new","","Creates a new Timeout",1,[[["t"],["duration"]],["self"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"to_string","tower_timeout::error","",2,[[["self"]],["string"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","tower_timeout::future","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"into_future","","",3,[[["self"]],["f"]]],[11,"clone","tower_timeout","",1,[[["self"]],["timeout"]]],[11,"fmt","tower_timeout::error","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_timeout::future","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_timeout","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_timeout::error","",2,[[["self"],["formatter"]],["result"]]],[11,"poll","tower_timeout::future","",3,[[["self"]],["poll"]]],[11,"layer","tower_timeout","",0,[[["self"],["s"]],["result"]]],[11,"poll_ready","","",1,[[["self"]],["poll"]]],[11,"call","","",1,N]],"paths":[[3,"TimeoutLayer"],[3,"Timeout"],[3,"Elapsed"],[3,"ResponseFuture"]]};
searchIndex["tower_util"]={"doc":"Various utility types and functions that are generally…","items":[[3,"BoxService","tower_util","A boxed `Service + Send` trait object.",N,N],[3,"UnsyncBoxService","","A boxed `Service` trait object.",N,N],[3,"CallAll","","This is a `futures::Stream` of responses resulting from…",N,N],[3,"CallAllUnordered","","A stream of responses received from the inner service in…",N,N],[3,"Oneshot","","A `Future` consuming a `Service` and request, waiting…",N,N],[3,"Optional","","Optionally forwards requests to an inner service.",N,N],[3,"Ready","","Future yielding a `Service` once the service is ready to…",N,N],[3,"ServiceFn","","A `Service` implemented by a closure.",N,N],[4,"Either","","Combine two different service types into a single type.",N,N],[13,"A","","",0,N],[13,"B","","",0,N],[5,"service_fn","","Returns a new `ServiceFn` with the given closure.",N,[[["t"]],["servicefn"]]],[11,"new","","",1,[[["s"]],["self"]]],[11,"new","","",2,[[["s"]],["self"]]],[11,"new","","Create new `CallAll` combinator.",3,[[["svc"],["s"]],["callall"]]],[11,"into_inner","","Extract the wrapped `Service`.",3,[[["self"]],["svc"]]],[11,"unordered","","Return responses as they are ready, regardless of the…",3,[[["self"]],["callallunordered"]]],[11,"new","","Create new `CallAllUnordered` combinator.",4,[[["svc"],["s"]],["callallunordered"]]],[11,"into_inner","","Extract the wrapped `Service`.",4,[[["self"]],["svc"]]],[0,"layer","","",N,N],[3,"Identity","tower_util::layer","A no-op middleware.",N,N],[3,"Stack","","Two middlewares chained together.",N,N],[11,"new","","Create a new `Identity` value",5,[[],["identity"]]],[11,"new","","Create a new `Stack`.",6,[[["inner"],["outer"]],["self"]]],[11,"new","tower_util","",7,[[["s"],["req"]],["self"]]],[11,"new","","Create a new `OptionService`",8,[[["option"]],["optional"]]],[11,"new","","",9,[[["t"]],["self"]]],[0,"error","","Error types",N,N],[0,"optional","tower_util::error","",N,N],[3,"None","tower_util::error::optional","",N,N],[0,"future","tower_util","Future types",N,N],[0,"optional","tower_util::future","",N,N],[3,"ResponseFuture","tower_util::future::optional","Response future returned by `Optional`.",N,N],[8,"MakeConnection","tower_util","The MakeConnection trait is used to create transports",N,N],[16,"Connection","","The transport provided by this service",10,N],[16,"Error","","Errors produced by the connecting service",10,N],[16,"Future","","The future that eventually produces the transport",10,N],[10,"poll_ready","","Returns `Ready` when it is able to make more connections.",10,[[["self"]],["poll"]]],[10,"make_connection","","Connect and return a transport asynchronously",10,N],[8,"MakeService","","Creates new `Service` values.",N,N],[16,"Response","","Responses given by the service",11,N],[16,"Error","","Errors produced by the service",11,N],[16,"Service","","The `Service` value created by this factory",11,N],[16,"MakeError","","Errors produced while building a service.",11,N],[16,"Future","","The future of the `Service` instance.",11,N],[10,"poll_ready","","Returns `Ready` when the factory is able to process create…",11,[[["self"]],["poll"]]],[10,"make_service","","Create and return a new service value asynchronously.",11,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"into_future","","",7,[[["self"]],["f"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"into_future","","",9,[[["self"]],["f"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"into_future","","",0,[[["self"]],["f"]]],[11,"from","tower_util::layer","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"to_string","tower_util::error::optional","",13,[[["self"]],["string"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","tower_util::future::optional","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"into_future","","",14,[[["self"]],["f"]]],[11,"default","tower_util::layer","",5,[[],["identity"]]],[11,"clone","","",5,[[["self"]],["identity"]]],[11,"clone","tower_util","",12,[[["self"]],["servicefn"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_util::layer","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_util::error::optional","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_util","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_util::error::optional","",13,[[["self"],["formatter"]],["result"]]],[11,"poll","tower_util","",0,[[["self"]],["poll"]]],[11,"poll","","",7,[[["self"]],["poll"]]],[11,"poll","tower_util::future::optional","",14,[[["self"]],["poll"]]],[11,"poll","tower_util","",9,[[["self"]],["poll"]]],[11,"poll","","",3,[[["self"]],["poll",["option"]]]],[11,"poll","","",4,[[["self"]],["poll",["option"]]]],[11,"poll_ready","","",1,[[["self"]],["poll"]]],[11,"call","","",1,[[["self"],["t"]],["box",["future"]]]],[11,"poll_ready","","",2,[[["self"]],["poll"]]],[11,"call","","",2,[[["self"],["t"]],["box",["future"]]]],[11,"poll_ready","","",0,[[["self"]],["poll"]]],[11,"call","","",0,N],[11,"poll_ready","","",8,[[["self"]],["poll"]]],[11,"call","","",8,N],[11,"poll_ready","","",12,[[["self"]],["poll"]]],[11,"call","","",12,N],[11,"layer","tower_util::layer","",5,[[["self"],["s"]],["result"]]],[11,"layer","","",6,[[["self"],["s"]],["result"]]]],"paths":[[4,"Either"],[3,"BoxService"],[3,"UnsyncBoxService"],[3,"CallAll"],[3,"CallAllUnordered"],[3,"Identity"],[3,"Stack"],[3,"Oneshot"],[3,"Optional"],[3,"Ready"],[8,"MakeConnection"],[8,"MakeService"],[3,"ServiceFn"],[3,"None"],[3,"ResponseFuture"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);
